{"version":3,"sources":["views/widgets/WidgetsDropdown.js","views/charts/ChartLineSimple.js","views/charts/ChartBarSimple.js"],"names":["WidgetsDropdown","sm","lg","color","header","text","footerSlot","pointed","className","style","height","dataPoints","pointHoverBackgroundColor","label","labels","name","placement","disabled","options","elements","line","tension","caret","backgroundColor","borderWidth","ChartLineSimple","props","borderColor","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","defaultProps","ChartBarSimple","barPercentage","categoryPercentage"],"mappings":"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","file":"static/js/33.c83c73d9.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CWidgetDropdown,\n  CRow,\n  CCol,\n  CDropdown,\n  CDropdownMenu,\n  CDropdownItem,\n  CDropdownToggle\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport ChartLineSimple from '../charts/ChartLineSimple'\nimport ChartBarSimple from '../charts/ChartBarSimple'\n\nconst WidgetsDropdown = () => {\n  // render\n  return (\n    <CRow>\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-primary\"\n          header=\"576\"\n          text=\"Alumnos\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"c-chart-wrapper mt-3 mx-3\"\n              style={{height: '70px'}}\n              dataPoints={[65, 59, 84, 84, 51, 55, 40]}\n              pointHoverBackgroundColor=\"primary\"\n              label=\"Members\"\n              labels=\"meses\"\n            />\n          }\n        >\n          <CDropdown>\n            <CDropdownToggle color=\"transparent\">\n              <CIcon name=\"cil-settings\"/>\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-info\"\n          header=\"16\"\n          text=\"Profesores\"\n          footerSlot={\n            <ChartLineSimple\n              pointed\n              className=\"mt-3 mx-3\"\n              style={{height: '70px'}}\n              dataPoints={[1, 18, 9, 17, 34, 22, 11]}\n              pointHoverBackgroundColor=\"info\"\n              options={{ elements: { line: { tension: 0.00001 }}}}\n              label=\"Members\"\n              labels=\"meses\"\n            />\n          }\n        >\n          <CDropdown>\n            <CDropdownToggle caret={false} color=\"transparent\">\n              <CIcon name=\"cil-location-pin\"/>\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-warning\"\n          header=\"449\"\n          text=\"Rendimiento esperado\"\n          footerSlot={\n            <ChartLineSimple\n              className=\"mt-3\"\n              style={{height: '70px'}}\n              backgroundColor=\"rgba(255,255,255,.2)\"\n              dataPoints={[78, 81, 80, 45, 34, 12, 40]}\n              options={{ elements: { line: { borderWidth: 2.5 }}}}\n              pointHoverBackgroundColor=\"warning\"\n              label=\"Members\"\n              labels=\"meses\"\n            />\n          }\n        >\n          <CDropdown>\n            <CDropdownToggle color=\"transparent\">\n              <CIcon name=\"cil-settings\"/>\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>\n        </CWidgetDropdown>\n      </CCol>\n\n      <CCol sm=\"6\" lg=\"3\">\n        <CWidgetDropdown\n          color=\"gradient-danger\"\n          header=\"127\"\n          text=\"Rendimiento Bajo\"\n          footerSlot={\n            <ChartBarSimple\n              className=\"mt-3 mx-3\"\n              style={{height: '70px'}}\n              backgroundColor=\"rgb(250, 152, 152)\"\n              label=\"Members\"\n              labels=\"meses\"\n            />\n          }\n        >\n          <CDropdown>\n            <CDropdownToggle caret className=\"text-white\" color=\"transparent\">\n              <CIcon name=\"cil-settings\"/>\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n              <CDropdownItem>Action</CDropdownItem>\n              <CDropdownItem>Another action</CDropdownItem>\n              <CDropdownItem>Something else here...</CDropdownItem>\n              <CDropdownItem disabled>Disabled action</CDropdownItem>\n            </CDropdownMenu>\n          </CDropdown>\n        </CWidgetDropdown>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default WidgetsDropdown\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n"],"sourceRoot":""}